/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Lock = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type MetaTransactionExecuted = ContractEventLog<{
  ownerAddress: string;
  relayerAddress: string;
  functionSignature: string;
  returnData: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Release = ContractEventLog<{
  user: string;
  amount: string;
  burnTxHash: string;
  0: string;
  1: string;
  2: string;
}>;

export interface LOCK extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LOCK;
  clone(): LOCK;
  methods: {
    burnTxHashes(arg0: string): NonPayableTransactionObject<boolean>;

    executeMetaTransaction(
      functionSignature: string | number[],
      sigR: string | number[],
      sigS: string | number[],
      sigV: number | string | BN
    ): NonPayableTransactionObject<string>;

    getChainId(): NonPayableTransactionObject<string>;

    getDomainSeperator(): NonPayableTransactionObject<string>;

    getNonce(user: string): NonPayableTransactionObject<string>;

    lockTokens(amount: number | string | BN): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    releaseTokens(
      user: string,
      amount: number | string | BN,
      burnTxHash: string
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    Lock(cb?: Callback<Lock>): EventEmitter;
    Lock(options?: EventOptions, cb?: Callback<Lock>): EventEmitter;

    MetaTransactionExecuted(
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;
    MetaTransactionExecuted(
      options?: EventOptions,
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Release(cb?: Callback<Release>): EventEmitter;
    Release(options?: EventOptions, cb?: Callback<Release>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Lock", cb: Callback<Lock>): void;
  once(event: "Lock", options: EventOptions, cb: Callback<Lock>): void;

  once(
    event: "MetaTransactionExecuted",
    cb: Callback<MetaTransactionExecuted>
  ): void;
  once(
    event: "MetaTransactionExecuted",
    options: EventOptions,
    cb: Callback<MetaTransactionExecuted>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Release", cb: Callback<Release>): void;
  once(event: "Release", options: EventOptions, cb: Callback<Release>): void;
}
